version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  # these are local variables to the build config
  variables:
    key: "value"

  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  vaultVariables:
  #  EXAMPLE_SECRET: "YOUR-SECRET-OCID"
  
  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # For this Build to run, the Build Pipeline needs to have a BUILDRUN_HASH parameter set
  exportedVariables:
    - DOCKER_USERNAME
    - USER_AUTH_TOKEN
    - BUILDRUN_HASH

    #  - DOCKER_REGISTRY_AUTH
    - TRIGGER_SOURCE_BRANCH_NAME
    - TRIGGER_COMMIT_HASH
    - DOCKER_REPO

steps:
  - type: Command
    name: "Define unique image tag"
    timeoutInSeconds: 40
    command: |
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH

  - type: Command
    timeoutInSeconds: 600
    name: "Install Node Prereqs"
    command: |
      cd ${OCI_WORKSPACE_DIR}/wercker_to_oci
      # install nvm
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm install lts/erbium
      echo "NODE VERSION: $(node -v)"
      echo "NPM VERSION: $(npm -v)"

    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  - type: Command
    timeoutInSeconds: 600
    name: "NPM install"
    command: |
      cd ${OCI_WORKSPACE_DIR}/wercker_to_oci
      npm install
    onFailure:
      - type: Command
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 40
        runAs: root
  
  - type: Command
    name: "Export Variables"
    timeoutInSeconds: 10
    command: |
      export DOCKER_USERNAME=${gDOCKER_USERNAME}
      export USER_AUTH_TOKEN=${gUSER_AUTH_TOKEN}
      #export DOCKER_REGISTRY_AUTH=`echo "${gDOCKER_USERNAME}:${gUSER_AUTH_TOKEN}" | base64|xargs`
      export TRIGGER_SOURCE_BRANCH_NAME=$OCI_TRIGGER_SOURCE_BRANCH_NAME
      export TRIGGER_COMMIT_HASH=$OCI_TRIGGER_COMMIT_HASH
      export DOCKER_REPO=${gDOCKER_REPO}
      echo "DockerRepo " $DOCKER_REPO "BUILDRUN_HASH: " $BUILDRUN_HASH

  - type: Command
    timeoutInSeconds: 1200
    name: "Run Tests"
    command: |
      cd ${OCI_WORKSPACE_DIR}/wercker_to_oci
      npm test

  - type: Command
    timeoutInSeconds: 1200
    name: "Build container image"
    command: |
      cd ${OCI_WORKSPACE_DIR}/wercker_to_oci
      docker build --pull --rm -t wercker_to_oci-getting-starter .

outputArtifacts:
  - name: output01
    type: DOCKER_IMAGE
    # this location tag doesn't effect the tag used to deliver the container image
    # to the Container Registry
    location: wercker_to_oci-getting-starter:latest
